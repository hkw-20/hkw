# YOLOv8n with CBAM
# 使用简单类名

# Parameters
nc: 20  # number of classes
scale: 'n'  # 明确指定缩放比例

# YOLOv8.0n backbone
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [16, 3, 2]]   # 0-P1/2
  - [-1, 1, Conv, [32, 3, 2]]   # 1-P2/4
  - [-1, 3, C2f, [32, True]]     # 2
  - [-1, 1, Conv, [64, 3, 2]]   # 3-P3/8
  - [-1, 6, C2f, [64, True]]     # 4
  
  # 第一个CBAM - 使用简单类名
  - [-1, 1, CBAM, [64]]          # 5
  
  - [-1, 1, Conv, [128, 3, 2]]  # 6-P4/16
  - [-1, 6, C2f, [128, True]]    # 7
  
  # 第二个CBAM
  - [-1, 1, CBAM, [128]]         # 8
  
  - [-1, 1, Conv, [256, 3, 2]]  # 9-P5/32
  - [-1, 3, C2f, [256, True]]    # 10
  - [-1, 1, SPPF, [256, 5]]     # 11

# YOLOv8.0n head
head:
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 8], 1, Concat, [1]]   # cat backbone P4
  - [-1, 3, C2f, [128]]         # 14

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 4], 1, Concat, [1]]   # cat backbone P3
  - [-1, 3, C2f, [64]]          # 17 (P3/8-small)

  - [-1, 1, Conv, [64, 3, 2]]
  - [[-1, 14], 1, Concat, [1]]  # cat head P4
  - [-1, 3, C2f, [128]]         # 20 (P4/16-medium)

  - [-1, 1, Conv, [128, 3, 2]]
  - [[-1, 11], 1, Concat, [1]]  # cat head P5
  - [-1, 3, C2f, [256]]         # 23 (P5/32-large)

  - [[17, 20, 23], 1, Detect, [nc]]  # Detect(P3, P4, P5)